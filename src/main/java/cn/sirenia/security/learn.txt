字节数组=》16进制字符串 spring,apache commons 都有提供工具类DigestUtils

对称加密（AES、DES、3DES）和非对称加密配合使用。
服务端随机生成对称加密的密钥key1
使用key1对数据data进行加密得到数据data2
使用私钥privateKey对key1进行加密得到key2
客户端收到数据data2和key2
使用公钥publicKey对key2进行解密得到key1
使用key1对数据data2进行解密得到数据data

架构
其实使用了https已经没有必要在自己做加解密了
服务->加解密层-------->加解密层->服务
可以通过http传输二进制，减少网络io，也可以转成base64/Hex字符串传输，通过http header控制
通过aop，实现加解密透明化
所有请求和响应都需要经过加密
由于使用加密，要求所有请求都使用post方法
加密前的数据，都使用json格式的文本
特殊情况要用get的，将加密后的byte[]转成base64放在url的参数中



除了md5，其他加密、编码得到的字节数组，不要转成Hex字符串（浪费空间）。
Hex：1个byte转成2个byte
Base64:2个byte转成3个byte

这个包下面这么多util，如何用？
非对称加密
用PrivateKey加密，用PublicKey解密，或者反过来。

私钥和公钥
从.keystore/.pfx里面获取
公钥还可以从.cer里面获取
还可以直接使用KeyPairGenerator生成私钥和公钥
私钥公钥不仅可以用来加解密，还可以用来签名验签

证书
.keystore和.pfx，都是证书容器，他们的区别就是格式不同，使用平台不同，前者java用，后者浏览器用，它们之间是可以相互转换的
可以往证书容器添加证书，导出证书
.cer证书只有公钥

一般用对称加密算法（比如AES）对数据加密，然后用非对称加密算法对AES的key进行加密，
既高效又安全



